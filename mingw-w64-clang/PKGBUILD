# Maintainer: Martell Malone <martellmalone@gmail.com>
# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Mateusz Miku≈Ça <mati865@gmail.com>
# Contributor: wirx6 <wirx654@gmail.com>
# Contributor: Yuui Tanabe <yuuitanabe@163.com>
# Contributor: Oscar Fuentes <ofv@wanadoo.es>
# Contributor: Adrian Pop <adrian.pop@liu.se>

_compiler=gcc
# "Ninja" cant install each component seperately
# https://github.com/martine/ninja/issues/932
_generator="Unix Makefiles"
#_generator="Ninja"
if [ "${_generator}" = "Ninja" ]; then
  _make_cmd="ninja"
else
  _make_cmd="make"
fi

_realname=clang
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-compiler-rt"
         "${MINGW_PACKAGE_PREFIX}-libc++"
         "${MINGW_PACKAGE_PREFIX}-libunwind"
         "${MINGW_PACKAGE_PREFIX}-lld"
         "${MINGW_PACKAGE_PREFIX}-llvm")
pkgver=11.0.0
pkgrel=1
pkgdesc="C language family frontend for LLVM (mingw-w64)"
arch=('any')
url="https://llvm.org/"
license=("custom:Apache 2.0 with LLVM Exception")
groups=("${MINGW_PACKAGE_PREFIX}-toolchain")
makedepends=(
            "cmake"
             "tar"
            "mingw-w64-cross-clang"
             $([[ "$_generator" == "Ninja" ]] && echo \
               "${MINGW_PACKAGE_PREFIX}-ninja")
             )
options=('!debug' 'strip')
_url=https://github.com/llvm/llvm-project/releases/download/llvmorg-${pkgver}
source=(${_url}/llvm-${pkgver}.src.tar.xz{,.sig}
        ${_url}/clang-${pkgver}.src.tar.xz{,.sig}
        ${_url}/compiler-rt-${pkgver}.src.tar.xz{,.sig}
        ${_url}/libcxx-${pkgver}.src.tar.xz{,.sig}
        ${_url}/libcxxabi-${pkgver}.src.tar.xz{,.sig}
        ${_url}/lld-${pkgver}.src.tar.xz{,.sig}
        ${_url}/libunwind-${pkgver}.src.tar.xz{,.sig}
        "0001-Use-posix-style-path-separators-with-MinGW.patch"
        "0002-Fix-GetHostTriple-for-mingw-w64-in-msys.patch"
        "0004-llvm-config-look-for-unversioned-shared-lib-on-win32.patch"
        "0009-empty-target-prefix-only-msvc.patch"
        "0013-Add-Z3-to-system-libraries-list-if-enabled.patch"
        "0101-Allow-build-static-clang-library-for-mingw.patch"
        "0103-Use-posix-style-path-separators-with-MinGW.patch"
        "0102-fix-libclang-name-for-mingw.patch"
        "0105-build-libclang-cpp-fix.patch"
        "0106-cmake-Fix-build-of-attribute-plugin-example-on-Windo.patch"
        "0201-Compiler-RT-Fix-profiler-building-with-MinGW-GCC.patch"
        "0301-LLD-COFF-Error-out-if-creating-a-DLL-with-too-many-e.patch"
        "0302-LLD-Allow-configuring-default-ld.lld-backend.patch"
        "0303-LLD-Ignore-ELF-tests-when-ld.lld-defaults-to-MinGW.patch"
        "0304-ignore-new-bfd-options.patch"
        "0504-fix-lldb-library-name-mingw.patch"
        "native-wrapper.h"
        "windres-wrapper.c"
        "windres.LICENSE"
        )
# Some patch notes :)
#0001-0099 -> llvm
#0101-0199 -> clang
#0201-0299 -> rt
#0301-0399 -> lld
#0401-0499 -> libc++
#0501-0599 -> lldb
#0601-0699 -> libunwind
#0701-0799 -> libc++abi
#0801-0899 -> polly
#0901-0999 -> openmp
sha256sums=('913f68c898dfb4a03b397c5e11c6a2f39d0f22ed7665c9cefa87a34423a72469'
            'SKIP'
            '0f96acace1e8326b39f220ba19e055ba99b0ab21c2475042dbc6a482649c5209'
            'SKIP'
            '374aff82ff573a449f9aabbd330a5d0a441181c535a3599996127378112db234'
            'SKIP'
            '6c1ee6690122f2711a77bc19241834a9219dda5036e1597bfa397f341a9b8b7a'
            'SKIP'
            '58697d4427b7a854ec7529337477eb4fba16407222390ad81a40d125673e4c15'
            'SKIP'
            'efe7be4a7b7cdc6f3bcf222827c6f837439e6e656d12d6c885d5c8a80ff4fd1c'
            'SKIP'
            '8455011c33b14abfe57b2fd9803fb610316b16d4c9818bec552287e2ba68922f'
            'SKIP'
            '988a22053c1cc3fa52b1242b3a7cec591ca69b57eb5531c37ce9c74157db62a0'
            '9b6d3ecb0ef4a38d34aefaefff8c6257ff22d366d84630020d7f079dc8065d97'
            '1f318c0370357fdf9c54ae6d31bad761b0caa58ac099998937b636309ecb6590'
            '33400d16d5f6671a8fd60345c3ae44b9777a7d600061957889d14305eb2ad709'
            'a2f0e8090a9450abe51e43ba9e9c8ff4b2a4024ba394deea4b8aff547e30fc33'
            'ddc43bc16f5edaf5290adabd71ce6a8a593fc3f824d7d99acd247bcce88aaf03'
            '2d1dc7f7cd6bd61f275cd0be6650f3086aee622074ac786ff5a921bf8ecaada2'
            '01b029f2a21bd998ce374a90d41d214c891dfbb611dfbd9ca147517cd2c228ea'
            'a60f7328d84628a56a9f626e4dc26ffd0c35292c79eeba62ac3d4f25aef2fe5c'
            '0098da33ce4cfea2a6b6943c15e769345f89b84ebea28facff4cc8b92a17bc8f'
            '6fe253d23be73ceccbc6be07ccbbe7561c5338cb71499062c41ffdf1a8b5469e'
            '0b996f438f7c7bf42c789729dfd588a65d5016386e7032e03e8cd52f1dc8bc73'
            'c74c313e442a5b8fed7c6372ac8ff8f3598c9e33db1b520f1297949e18042e55'
            '2e1705274dfc55466cc8977e61d569a685e18ce07895cbec2ccf3b848eafd8ee'
            '778e0db0a5b0657ab05e2a81d83241347a4a41af2b0f9903422f651fa58e8d40'
            'bed7ae642486a8fd0db5afb0b9afcd8a87605de318ad891bf4c9378a2eb09dc2'
            'c9758342cb926605cd1b30ccb92e6b47f5cc930a15904462e0445959f9be49c1'
            '343b311e77959c026b2aa3fd92b3f2c6002ea8a9d1d5d240e3d3ad93ad27e5a7'
            '07368fd2805f45f706a5f63051e161989e97bd150731ee88976a04edd8546d54')
validpgpkeys=('B6C8F98282B944E3B0D5C2530FC3042E345AD05D'  # Hans Wennborg, Google.
              '474E22316ABF4785A88C6E8EA2C794A986419D8A') # Tom Stellard
noextract=(clang-${pkgver}.src.tar.xz
           libcxx-${pkgver}.src.tar.xz
           lldb-${pkgver}.src.tar.xz
           test-suite-${pkgver}.src.tar.xz)

apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  plain "Extracting clang-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  [[ -d ${srcdir}/clang-${pkgver} ]] && rm -rf ${srcdir}/clang-${pkgver}
  [[ -d ${srcdir}/clang-${pkgver} ]] || tar -xJf ${srcdir}/clang-${pkgver}.src.tar.xz -C ${srcdir} || true

  plain "Extracting libcxx-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  [[ -d ${srcdir}/libcxx-${pkgver} ]] && rm -rf ${srcdir}/libcxx-${pkgver}
  [[ -d ${srcdir}/libcxx-${pkgver} ]] || tar -xJf ${srcdir}/libcxx-${pkgver}.src.tar.xz -C ${srcdir} || true

  cd "${srcdir}/llvm-${pkgver}.src"
  apply_patch_with_msg \
      "0001-Use-posix-style-path-separators-with-MinGW.patch" \
      "0002-Fix-GetHostTriple-for-mingw-w64-in-msys.patch" \
      "0004-llvm-config-look-for-unversioned-shared-lib-on-win32.patch" \
      "0009-empty-target-prefix-only-msvc.patch" \
      "0013-Add-Z3-to-system-libraries-list-if-enabled.patch"

  cd "${srcdir}/clang-${pkgver}.src"
  apply_patch_with_msg \
      "0101-Allow-build-static-clang-library-for-mingw.patch" \
      "0102-fix-libclang-name-for-mingw.patch" \
      "0103-Use-posix-style-path-separators-with-MinGW.patch" \
      "0105-build-libclang-cpp-fix.patch" \
      "0106-cmake-Fix-build-of-attribute-plugin-example-on-Windo.patch"

  cd "${srcdir}/compiler-rt-${pkgver}.src"
  apply_patch_with_msg \
      "0201-Compiler-RT-Fix-profiler-building-with-MinGW-GCC.patch" \

  cd "${srcdir}/lld-${pkgver}.src"
  apply_patch_with_msg \
      "0301-LLD-COFF-Error-out-if-creating-a-DLL-with-too-many-e.patch" \
      "0302-LLD-Allow-configuring-default-ld.lld-backend.patch" \
      "0303-LLD-Ignore-ELF-tests-when-ld.lld-defaults-to-MinGW.patch" \
      "0304-ignore-new-bfd-options.patch"

  cd "${srcdir}"
  rm -rf clang clang-tools-extra lld lldb polly compiler-rt libcxx \
         libcxxabi libunwind openmp test-suite | true
  mv "${srcdir}/clang-${pkgver}.src"             clang
  mv "${srcdir}/lld-${pkgver}.src"               lld
  mv "${srcdir}/compiler-rt-${pkgver}.src"       compiler-rt
  mv "${srcdir}/libcxxabi-${pkgver}.src"         libcxxabi
  mv "${srcdir}/libcxx-${pkgver}.src"            libcxx
  mv "${srcdir}/libunwind-${pkgver}.src"         libunwind
}

build() {
  cd "${srcdir}"

  [[ -d build-${CARCH} ]] && rm -rf build-${CARCH}
  mkdir build-${CARCH} && cd build-${CARCH}

  local -a extra_config

  if check_option "debug" "y"; then
    extra_config+=(-DCMAKE_BUILD_TYPE=Debug)
    VERBOSE="VERBOSE=1"
  else
    extra_config+=(-DCMAKE_BUILD_TYPE=Release)
  fi

  export PATH="/opt/${MINGW_CHOST}/bin:$PATH"
  export CC='clang' CXX='clang++' AS="clang" AR="llvm-ar" RANLIB="llvm-ranlib" DLLTOOL="llvm-dlltool"

  # A bit hacky but it works
  _clang_links="clang++;clang-cpp;as;c++;cc;cpp;g++;gcc;${MINGW_CHOST}-cc;${MINGW_CHOST}-c++;${MINGW_CHOST}-clang;${MINGW_CHOST}-clang++;${MINGW_CHOST}-g++;${MINGW_CHOST}-gcc"

  cmake \
    -G"$_generator" \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_LINKER=lld \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCLANG_LINKS_TO_CREATE="${_clang_links}" \
    -DCMAKE_CROSSCOMPILING=OFF \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib \
    -DCMAKE_SYSTEM_NAME=Windows \
    -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
    -DLIBCLANG_BUILD_STATIC=ON \
    -DLLD_DEFAULT_LD_LLD_IS_MINGW=ON \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_BUILD_STATIC=OFF \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_ENABLE_LIBCXX=ON \
    -DLLVM_ENABLE_LLD=ON \
    -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;lld" \
    -DLLVM_ENABLE_THREADS=ON \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DPython3_FIND_REGISTRY=NEVER \
    -DPython3_ROOT_DIR=${MINGW_PREFIX} \
    "${extra_config[@]}" \
    ../llvm-${pkgver}.src

  ${_make_cmd}

  # Disable automatic installation of components that go into subpackages
  # -i.orig to check what has been removed in-case it starts dropping more than it should
  #
  sed -i.orig '/\(clang\|lld\)\/cmake_install.cmake/d' tools/cmake_install.cmake
  sed -i.orig '/\(compiler-rt\|libcxxabi\|libcxx\|libunwind\)\/cmake_install.cmake/d' projects/cmake_install.cmake

  # Force win32 threads for libc++abi
  export CXXFLAGS="${CXXFLAGS} -D_LIBCPP_HAS_THREAD_API_WIN32"
  COMMON_CMAKE_ARGS=(-DCMAKE_BUILD_TYPE=Release
    -DCMAKE_CROSSCOMPILING=OFF
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX}
    -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib
    -DCMAKE_SYSTEM_NAME=Windows
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=ON
    -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON
    -DLIBCXX_HAS_WIN32_THREAD_API=ON
    -DLIBCXX_INCLUDE_BENCHMARKS=OFF
    -DLIBCXX_USE_COMPILER_RT=ON
    -DLIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS=OFF
    -DLIBCXXABI_ENABLE_SHARED=OFF
    -DLIBCXXABI_ENABLE_STATIC=ON
    -DLIBCXXABI_INSTALL_SHARED_LIBRARY=OFF
    -DLIBCXXABI_INSTALL_STATIC_LIBRARY=OFF
    -DLIBCXXABI_USE_COMPILER_RT=ON
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON
    -DLIBUNWIND_ENABLE_SHARED=ON
    -DLIBUNWIND_USE_COMPILER_RT=ON
    -DLLVM_ENABLE_LLD=ON
    -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi;libunwind"
    -DPython3_FIND_REGISTRY=NEVER
    -DPython3_ROOT_DIR=${MINGW_PREFIX})

  cd "${srcdir}"

  [[ -d build-libcxx-shared-${CARCH} ]] && rm -rf build-libcxx-shared-${CARCH}
  mkdir build-libcxx-shared-${CARCH} && cd build-libcxx-shared-${CARCH}

  cmake \
    -G"$_generator" \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} -D_LIBCPP_BUILDING_LIBRARY -U_LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS" \
    -DLIBCXX_ENABLE_SHARED=ON \
    -DLIBCXX_ENABLE_STATIC=OFF \
    -DLIBUNWIND_ENABLE_STATIC=OFF \
    "${COMMON_CMAKE_ARGS[@]}" \
    ${extra_config[@]} \
    ../llvm-${pkgver}.src

  ${_make_cmd} cxx

  cd "${srcdir}"

  [[ -d build-libcxx-static-${CARCH} ]] && rm -rf build-libcxx-static-${CARCH}
  mkdir build-libcxx-static-${CARCH} && cd build-libcxx-static-${CARCH}

  cmake \
    -G"$_generator" \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS" \
    -DLIBCXX_ENABLE_SHARED=OFF \
    -DLIBCXX_ENABLE_STATIC=ON \
    -DLIBUNWIND_ENABLE_STATIC=ON \
    "${COMMON_CMAKE_ARGS[@]}" \
    ${extra_config[@]} \
    ../llvm-${pkgver}.src

  ${_make_cmd} unwind cxx

  cd "${srcdir}"

  [[ -d build-windres-${CARCH} ]] && rm -rf build-windres-${CARCH}
  mkdir build-windres-${CARCH} && cd build-windres-${CARCH}

  $CC $CFLAGS $LDFLAGS -DDEFAULT_TARGET=\"${MINGW_CHOST}\" ../windres-wrapper.c -o llvm-windres.exe
}

check() {
 cd "${srcdir}"/build-${CARCH}
 # Remove || true once testcase doesn't cause failures.
#  make check || true
#  make check-clang || true
#  make check-polly || true
  make check-lld || true
}

package_clang() {
  pkgdesc="C language family frontend for LLVM (mingw-w64)"
  url="https://clang.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-compiler-rt=${pkgver}-${pkgrel}"
           "${MINGW_PACKAGE_PREFIX}-lld=${pkgver}-${pkgrel}"
           "${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}")
  provides=("${MINGW_PACKAGE_PREFIX}-gcc")

  cd "${srcdir}/clang"
  ${_make_cmd} -C ../build-${CARCH}/tools/clang DESTDIR="${pkgdir}" install

  # Install static libraries
  install -Dm644 ../build-${CARCH}/lib/libclang.a ${pkgdir}${MINGW_PREFIX}/lib/libclang.a
  install -Dm644 ../build-${CARCH}/lib/libclang.a ${pkgdir}${MINGW_PREFIX}/lib/libclang_static.a
}

package_compiler-rt() {
  pkgdesc="Runtime libraries for Clang and LLVM (mingw-w64)"
  url="https://compiler-rt.llvm.org/"

  cd "${srcdir}"/compiler-rt
  ${_make_cmd} -C ../build-${CARCH}/projects/compiler-rt DESTDIR="${pkgdir}" install
}

package_libcxx() {
  pkgdesc="C++ Standard Library (mingw-w64)"
  url="https://libcxx.llvm.org/"
  provides=("${MINGW_PACKAGE_PREFIX}-gcc-libs")
  depends=("${MINGW_PACKAGE_PREFIX}-libunwind")

  cd "${srcdir}/libcxx"
  ${_make_cmd} -C ../build-libcxx-shared-${CARCH}/projects/libcxx DESTDIR="${pkgdir}" install
  ${_make_cmd} -C ../build-libcxx-static-${CARCH}/projects/libcxx DESTDIR="${pkgdir}" install

  install -Dm644 "${srcdir}/build-libcxx-static-${CARCH}/lib/libc++experimental.a" "${pkgdir}${MINGW_PREFIX}/lib/libc++experimental.a"
}

package_libunwind() {
  pkgdesc='A new implementation of a stack unwinder for C++ exceptions (mingw-w64)'
  url='https://llvm.org/'

  cd "${srcdir}/libunwind"
  ${_make_cmd} -C ../build-libcxx-static-${CARCH}/projects/libunwind DESTDIR="${pkgdir}" install

  mkdir -p "${pkgdir}${MINGW_PREFIX}/bin"
  install "${srcdir}/build-libcxx-static-${CARCH}/lib/libunwind.dll" "${pkgdir}${MINGW_PREFIX}/bin/libunwind.dll"
}

package_lld() {
  pkgdesc="Linker tools for LLVM (mingw-w64)"
  url="https://lld.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}")
  provides=("${MINGW_PACKAGE_PREFIX}-binutils")

  cd "${srcdir}/lld"
  ${_make_cmd} -C ../build-${CARCH}/tools/lld DESTDIR="${pkgdir}" install
  install -Dm644 "${pkgdir}${MINGW_PREFIX}/bin/lld.exe" "${pkgdir}${MINGW_PREFIX}/bin/ld.exe"
}

package_llvm() {
  pkgdesc="Low Level Virtual Machine (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-libc++")

  cd "${srcdir}"/llvm-${pkgver}.src

  ${_make_cmd} -C ../build-${CARCH} DESTDIR="${pkgdir}" install

  install -Dm644 LICENSE.TXT "${pkgdir}${MINGW_PREFIX}/share/licenses/llvm/LICENSE"

  # Install CMake stuff
  install -d "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/{modules,platforms}
  install -Dm644 "${srcdir}"/llvm-${pkgver}.src/cmake/modules/*.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/modules/
  install -Dm644 "${srcdir}"/llvm-${pkgver}.src/cmake/platforms/*.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/platforms/

  # FileCheck is needed to build rust.
  install -Dm755 "${srcdir}"/build-${CARCH}/bin/FileCheck.exe "${pkgdir}${MINGW_PREFIX}/bin/FileCheck.exe"
  # fix cmake files.
  local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
  sed -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" -i ${pkgdir}/${MINGW_PREFIX}/lib/cmake/llvm/LLVMExports.cmake

  install -Dm755 "${srcdir}/build-windres-${CARCH}/llvm-windres.exe" "${pkgdir}${MINGW_PREFIX}/bin/llvm-windres.exe"
  install -Dm755 "${srcdir}/build-windres-${CARCH}/llvm-windres.exe" "${pkgdir}${MINGW_PREFIX}/bin/${MINGW_CHOST}-windres.exe"
  install -Dm755 "${srcdir}/build-windres-${CARCH}/llvm-windres.exe" "${pkgdir}${MINGW_PREFIX}/bin/windres.exe"
  install -Dm644 ../windres.LICENSE "${pkgdir}${MINGW_PREFIX}/share/licenses/windres/LICENSE"
}

# Wrappers
package_mingw-w64-clang-i686-clang(){
  package_clang
}

package_mingw-w64-clang-i686-compiler-rt(){
  package_compiler-rt
}

package_mingw-w64-clang-i686-libc++(){
  package_libcxx
}

package_mingw-w64-clang-i686-openmp(){
  package_openmp
}

package_mingw-w64-clang-i686-lld(){
  package_lld
}
package_mingw-w64-clang-i686-libunwind(){
  package_libunwind
}

package_mingw-w64-clang-i686-llvm(){
  package_llvm
}

package_mingw-w64-clang-x86_64-clang(){
  package_clang
}

package_mingw-w64-clang-x86_64-compiler-rt(){
  package_compiler-rt
}

package_mingw-w64-clang-x86_64-libc++(){
  package_libcxx
}

package_mingw-w64-clang-x86_64-lld(){
  package_lld
}

package_mingw-w64-clang-x86_64-libunwind(){
  package_libunwind
}

package_mingw-w64-clang-x86_64-llvm(){
  package_llvm
}

package_mingw-w64-i686-clang(){
  package_clang
}

package_mingw-w64-i686-compiler-rt(){
  package_compiler-rt
}

package_mingw-w64-i686-libc++(){
  package_libcxx
}

package_mingw-w64-i686-openmp(){
  package_openmp
}

package_mingw-w64-i686-lld(){
  package_lld
}
package_mingw-w64-i686-libunwind(){
  package_libunwind
}

package_mingw-w64-i686-llvm(){
  package_llvm
}
